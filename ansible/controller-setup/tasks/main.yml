---
# tasks file for controller-setup
- name: Setup correct hostname
  hostname: 
    name: "{{ host_name }}"

- name: Update repositories cache and install "unzip" package
  apt:
    name: unzip
    update_cache: yes

- name: Copy certificates, private keys and secret to the controller
  copy: src={{ item }} dest=/var/lib/kubernetes/
  with_items:
    - '{{ output_dir }}/ca.pem'
    - '{{ output_dir }}/ca-key.pem'
    - '{{ output_dir }}/kubernetes-key.pem'
    - '{{ output_dir }}/kubernetes.pem'
    - '{{ output_dir }}/encryption-config.yaml'


- name: Download and unarchive etcd 3.3.13
  unarchive:
    src: https://github.com/coreos/etcd/releases/download/v3.3.13/etcd-v3.3.13-linux-amd64.tar.gz
    dest: /
    remote_src: yes

- name: Copy etcd execs to bin folder
  copy: 
    src: /etcd-v3.3.13-linux-amd64/{{ item }} 
    dest: /usr/local/bin/
    mode: '+x'
    remote_src: yes
  with_items:
    - etcd
    - etcdctl

- name: Create etcd directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - /etc/etcd
    - /var/lib/etcd

- name: Copy ca and kube keys to etcd
  copy: src={{ item}} dest=/etc/etcd/
  with_items:
    - '{{ output_dir }}/ca.pem'
    - '{{ output_dir }}/kubernetes-key.pem'
    - '{{ output_dir }}/kubernetes.pem'


- name: Create etcd systemd service unit file
  copy:
    dest: "/etc/systemd/system/etcd.service"
    content: |
        [Unit]
        Description=etcd
        Documentation=https://github.com/coreos

        [Service]
        ExecStart=/usr/local/bin/etcd \
            --name {{ host_name }} \
            --cert-file=/etc/etcd/kubernetes.pem \
            --key-file=/etc/etcd/kubernetes-key.pem \
            --peer-cert-file=/etc/etcd/kubernetes.pem \
            --peer-key-file=/etc/etcd/kubernetes-key.pem \
            --trusted-ca-file=/etc/etcd/ca.pem \
            --peer-trusted-ca-file=/etc/etcd/ca.pem \
            --peer-client-cert-auth \
            --client-cert-auth \
            --initial-advertise-peer-urls https://{{ master_priv_ip }}:2380 \
            --listen-peer-urls https://{{ master_priv_ip }}:2380 \
            --listen-client-urls https://{{ master_priv_ip }}:2379,http://127.0.0.1:2379 \
            --advertise-client-urls https://{{ master_priv_ip }}:2379 \
            --initial-cluster-token etcd-cluster-0 \
            --initial-cluster {{ host_name }}=https://{{ master_priv_ip }}:2380 \
            --initial-cluster-state new \
            --data-dir=/var/lib/etcd 
        Restart=on-failure 
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

- name: Start and enable service etcd
  systemd:
    name: etcd
    state: started
    enabled: yes
    daemon_reload: yes



- name: Download kubernetes binaries
  get_url:
    url: "{{ item }}"
    dest: /
    remote_src: yes
  with_items:
    - https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kube-apiserver
    - https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kube-controller-manager
    - https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kube-scheduler
    - https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kubectl


- name: Copy kubernetes execs to bin folder
  copy: 
    src: "/{{ item }}"
    dest: /usr/local/bin/
    mode: '+x'
    remote_src: yes
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kubectl


- name: Grabbing subnet cidr from local terraform output
  local_action: shell terraform output subnet_cidr chdir="{{ playbook_dir }}/../terraform"
  become: no
  register: terraform_subnet_cidr
  tags:
    - current

- name: Grabbing vpc cidr from local terraform output
  local_action: shell terraform output vpc_cidr chdir="{{ playbook_dir }}/../terraform"
  become: no
  register: terraform_vpc_cidr
  tags:
    - current

- name: Create kube-apiserver systemd service unit file
  tags:
    - current
  copy:
    dest: "/etc/systemd/system/kube-apiserver.service"
    content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-apiserver \
        --admission-control=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
        --advertise-address={{ master_priv_ip }} \
        --allow-privileged=true \
        --apiserver-count=3 \
        --audit-log-maxage=30 \
        --audit-log-maxbackup=3 \
        --audit-log-maxsize=100 \
        --audit-log-path=/var/log/audit.log \
        --authorization-mode=Node,RBAC \
        --bind-address=0.0.0.0 \
        --client-ca-file=/var/lib/kubernetes/ca.pem \
        --enable-swagger-ui=true \
        --etcd-cafile=/var/lib/kubernetes/ca.pem \
        --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \
        --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \
        --etcd-servers=https://{{ master_priv_ip }}:2379 \
        --event-ttl=1h \
        --experimental-encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \
        --insecure-bind-address=127.0.0.1 \
        --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \
        --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \
        --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \
        --kubelet-https=true \
        --runtime-config=api/all \
        --service-account-key-file=/var/lib/kubernetes/ca-key.pem \
        --service-cluster-ip-range={{ terraform_subnet_cidr.stdout }} \
        --service-node-port-range=30000-32767 \
        --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \
        --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \
        --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

- name: Start and enable service kube-apiserver
  tags:
    - current
  systemd:
    name: kube-apiserver
    state: started
    enabled: yes
    daemon_reload: yes

- name: Create kube controller manager systemd service unit file
  tags:
    - current
  copy:
    dest: "/etc/systemd/system/kube-controller-manager.service"
    content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-controller-manager \
        --address=0.0.0.0 \
        --cluster-cidr={{ terraform_vpc_cidr.stdout }} \
        --cluster-name=kubernetes \
        --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \
        --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \
        --leader-elect=true \
        --master=http://127.0.0.1:8080 \
        --root-ca-file=/var/lib/kubernetes/ca.pem \
        --service-account-private-key-file=/var/lib/kubernetes/ca-key.pem \
        --service-cluster-ip-range={{ terraform_subnet_cidr.stdout }} \
        --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

- name: Start and enable service kube-controller-manager
  systemd:
    name: kube-controller-manager
    state: started
    enabled: yes
    daemon_reload: yes

- name: Create kube scheduler systemd service unit file
  tags:
    - current
  copy:
    dest: "/etc/systemd/system/kube-scheduler.service"
    content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-scheduler \
        --leader-elect=true \
        --master=http://127.0.0.1:8080 \
        --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target


- name: Start and enable service kube-scheduler
  systemd:
    name: kube-scheduler
    state: started
    enabled: yes
    daemon_reload: yes
